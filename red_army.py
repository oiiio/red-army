from typing import TypedDict, Annotated, List
import operator

# shared memory that all agents will read from and write to.
class RedArmyState(TypedDict):
    """
    Represents the state of the Red Army multi-agent system.

    Attributes:
        objective: The initial high-level mission goal.
        plan: A list of tasks generated by the Red Commander.
        current_task_index: The index of the current task in the plan.
        task_output: The result from the last executed tool.
        feedback: The analysis from the Chronicler, providing situational awareness.
        history: A log of all actions taken, for context and debugging.
        revision_number: Tracks how many times the plan has been adapted.
    """
    objective: str
    plan: List[str]
    current_task_index: int
    task_output: str
    feedback: str

    # The 'Annotated' type hint with 'operator.add' tells LangGraph
    # to append to this list rather than overwriting it in each step.
    history: Annotated[List[str], operator.add]

    revision_number: int